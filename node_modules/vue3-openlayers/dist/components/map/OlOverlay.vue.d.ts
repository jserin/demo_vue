import { DefineComponent, ShallowRef, Ref, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { Coordinate } from 'ol/coordinate';
import { PanIntoViewOptions, Positioning, default as Overlay, Options } from 'ol/Overlay';

declare const _default: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options>, {
    positioning: string;
    stopEvent: boolean;
    insertFirst: boolean;
    autoPan: boolean;
    className: string;
}>, {
    overlay: ShallowRef<Overlay>;
    htmlContent: Ref<HTMLElement | undefined>;
    getOffset: () => number[];
    getPosition: () => Coordinate | undefined;
    getPositioning: () => Positioning;
    panIntoView: (optPanIntoViewOptions: PanIntoViewOptions) => void;
    setElement: (element: HTMLElement | undefined) => void;
    setOffset: (offset: number[]) => void;
    setPosition: (position?: Coordinate | undefined) => void;
    setPositioning: (positioning: Positioning) => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options>, {
    positioning: string;
    stopEvent: boolean;
    insertFirst: boolean;
    autoPan: boolean;
    className: string;
}>>>, {
    className: string;
    positioning: Positioning;
    stopEvent: boolean;
    insertFirst: boolean;
    autoPan: boolean | PanIntoViewOptions;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
