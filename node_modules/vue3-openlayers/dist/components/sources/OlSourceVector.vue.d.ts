import { Feature } from 'ol';
import { default as Geometry } from 'ol/geom/Geometry';
import { Ref, DefineComponent, ShallowRef, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';
import { WebGLVectorLayer } from '../layers/WebGLVectorLayerClass';
import { default as HeatmapLayer } from 'ol/layer/Heatmap';
import { default as VectorLayer } from 'ol/layer/Vector';
import { default as VectorSource, Options } from 'ol/source/Vector';

declare const _default: __VLS_WithTemplateSlots< DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options<Geometry>>, {
    overlaps: boolean;
    projection: string;
    useSpatialIndex: boolean;
    wrapX: boolean;
}>, {
    layer: Ref<HeatmapLayer> | Ref<WebGLVectorLayer> | Ref<VectorLayer<VectorSource<Geometry>>> | null;
    source: ShallowRef<VectorSource< Feature<Geometry>>>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options<Geometry>>, {
    overlaps: boolean;
    projection: string;
    useSpatialIndex: boolean;
    wrapX: boolean;
}>>>, {
    wrapX: boolean;
    overlaps: boolean;
    useSpatialIndex: boolean;
}, {}>, {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
