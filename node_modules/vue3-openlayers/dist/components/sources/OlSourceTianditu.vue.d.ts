import { RequestEncoding } from 'ol/source/WMTS';
import { LoadFunction } from 'ol/Tile';
import { Projection } from 'ol/proj';
import { Options, Tianditu } from './TiandituClass';
import { default as TileLayer } from 'ol/layer/Tile';
import { Ref, DefineComponent, ShallowRef, ComponentOptionsMixin, PublicProps, ExtractPropTypes, PropType } from 'vue';

declare const _default: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options>, {
    layerType: string;
    isLabel: boolean;
    projection: string;
    hidpi: boolean;
    requestEncoding: string;
    version: string;
    culture: string;
    dimensions: () => {};
    maxZoom: number;
    tileLoadFunction: (imageTile: any, src: any) => void;
    wrapX: boolean;
}>, {
    layer: Ref<TileLayer<Tianditu>> | null | undefined;
    source: ShallowRef<Tianditu>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly< ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Options>, {
    layerType: string;
    isLabel: boolean;
    projection: string;
    hidpi: boolean;
    requestEncoding: string;
    version: string;
    culture: string;
    dimensions: () => {};
    maxZoom: number;
    tileLoadFunction: (imageTile: any, src: any) => void;
    wrapX: boolean;
}>>>, {
    wrapX: boolean;
    maxZoom: number;
    projection: string | Projection;
    tileLoadFunction: LoadFunction;
    version: string;
    requestEncoding: RequestEncoding;
    dimensions: any;
    layerType: string;
    isLabel: boolean;
}, {}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
